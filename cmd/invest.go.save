/*
Copyright Â© 2020 Rob Callahan <robtcallahan@aol.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cmd

import (
	"fmt"
	"github.com/dustin/go-humanize"
	"github.com/plaid/plaid-go/plaid"
	"register/pkg/banking"
	cfg "register/pkg/config"

	"github.com/spf13/cobra"
)

// investCmd represents the invest command
var investCmd = &cobra.Command{
	Use:   "invest",
	Short: "Get all investments",
	Long:  ``,
	Run: func(cmd *cobra.Command, args []string) {
		invest()
	},
}

func init() {
	config = cfg.ReadConfig()
	rootCmd.AddCommand(investCmd)

	investCmd.Flags().StringVarP(&options.SpreadsheetID, "id", "i", config.SpreadsheetID, "The Google spreadsheet id")
	investCmd.Flags().Int64VarP(&options.StartRow, "start", "s", config.RegisterStartRow, "The last used row in the spreadsheet")
	investCmd.Flags().Int64VarP(&options.EndRow, "end", "e", config.RegisterEndRow, "The last used row in the spreadsheet")

	investCmd.Flags().BoolVarP(&options.Test, "test", "t", false, "Test mode; no updates performed")
	investCmd.Flags().BoolVarP(&options.Debug, "debug", "d", false, "Debug mode")
}

type Account struct {
	Firm string
	PlaidAccounts []plaid.Account
}

func invest() {
	var accounts []Account

	bankClient := banking.New(&banking.ClientOptions{
		StartDate:     config.StartDate,
		EndDate:       config.EndDate,
		BankInfo:      config.BankInfo,
		Debug:         options.Debug,
		PlaidClientID: config.PlaidClientID,
		PlaidSecret:   config.PlaidSecret,
	})

	keys := []string{"etrade", "betterment", "fidelity_401k", "ally"}
	for _, key := range keys {
		bankClient.SetBank(config.BankInfo[key])

		a := bankClient.GetAccounts()
		if key == "fidelity_401k" {
			a = []plaid.Account{a[0]}
		}

		account := Account{
			Firm: config.BankInfo[key].Firm,
			PlaidAccounts: a,
		}
		accounts = append(accounts, account)
	}

	var sum float64
	for _, acc := range accounts {
		fmt.Printf("%s\n", acc.Firm)
		for _, plaidAccount := range acc.PlaidAccounts {
			sum += plaidAccount.Balances.Current
			fmt.Printf("    %-30s $ %10s\n", plaidAccount.Name, humanize.FormatFloat("#,###.##", plaidAccount.Balances.Current))
		}
	}
	fmt.Println("")
	fmt.Printf("%-34s $ %10s\n", "Investments Total", humanize.FormatFloat("#,###.##", sum))
}
